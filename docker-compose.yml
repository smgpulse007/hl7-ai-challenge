version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hedis-postgres
    environment:
      POSTGRES_DB: hedis_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hedis-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hedis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hedis-network

  # RabbitMQ Message Broker (Local for Demo)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: hedis-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ml-predictor
      RABBITMQ_DEFAULT_PASS: P@ssPr3dictor
      RABBITMQ_DEFAULT_VHOST: ml-predictor
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hedis-network

  # HL7 Processing Service
  hl7-processing:
    build:
      context: ./services/hl7-processing
      dockerfile: Dockerfile
    container_name: hedis-hl7-processing
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hedis_ai
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=ml-predictor
      - RABBITMQ_PASSWORD=P@ssPr3dictor
      - RABBITMQ_VHOST=ml-predictor
      - RABBITMQ_SSL_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
      - ./l1_extraction_engine:/app/l1_extraction_engine
    networks:
      - hedis-network
    restart: unless-stopped

  # Risk Prediction Service
  risk-prediction:
    build:
      context: ./services/risk-prediction
      dockerfile: Dockerfile
    container_name: hedis-risk-prediction
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hedis_ai
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=ml-predictor
      - RABBITMQ_PASSWORD=P@ssPr3dictor
      - RABBITMQ_VHOST=ml-predictor
      - RABBITMQ_SSL_ENABLED=false
      - MLFLOW_TRACKING_URI=http://pvposwbc02.iehp.local:8000/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
      - ./modeling:/app/modeling
    networks:
      - hedis-network
    restart: unless-stopped

  # Care Orchestration Service
  care-orchestration:
    build:
      context: ./services/care-orchestration
      dockerfile: Dockerfile
    container_name: hedis-care-orchestration
    ports:
      - "8003:8003"
    volumes:
      - ./samples:/app/samples
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hedis_ai
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=ml-predictor
      - RABBITMQ_PASSWORD=P@ssPr3dictor
      - RABBITMQ_VHOST=ml-predictor
      - RABBITMQ_SSL_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - hedis-network
    restart: unless-stopped

  # Dashboard Service (React Frontend)
  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: hedis-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8003
      - REACT_APP_WEBSOCKET_URL=ws://localhost:3000
      - NODE_ENV=development
    depends_on:
      - care-orchestration
    networks:
      - hedis-network
    restart: unless-stopped

  # Nginx Reverse Proxy (API Gateway)
  nginx:
    image: nginx:alpine
    container_name: hedis-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - hl7-processing
      - risk-prediction
      - care-orchestration
      - dashboard
    networks:
      - hedis-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  hedis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
